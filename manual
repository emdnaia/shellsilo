
<<<<<<< Updated upstream


===========| IF STATEMENT |===========
=======
##### IF STATEMENT #####
>>>>>>> Stashed changes

if (var1 == <var2/string/int/hex>){
	do something
	break;
}
;; The if statement right side must be a variable, string, int, or hex.

<<<<<<< Updated upstream
++++++++++++++++++++++++++++++++++++++

===========| Infinite While loop |===========
=======
##### Infinite While loop ####
>>>>>>> Stashed changes

while(TRUE){
	if (<var1> == <var2/string/int/hex>){
		do something
		break;
	}
}
;; Only infinite while loops work for now
;; If statements only work inside infinite loops to allow the user to break upon condition.
;; Wait for future updates to accept if statements outside loops.
<<<<<<< Updated upstream
++++++++++++++++++++++++++++++++++++++



===========| Define Structs |===========
=======

##### Define Structs ######
>>>>>>> Stashed changes

typedef struct <structure_name> {
	struct body;
	struct body;
	struct body;
}<struct alias>, *<optional_pointer>;

Example 1: 
	typedef struct _UNICODE_STRING {
    USHORT Length;
    USHORT MaximumLength;
    PWSTR  Buffer;
} UNICODE_STRING, *PUNICODE_STRING;

Example 2:
typedef struct _OBJECT_ATTRIBUTES {
  ULONG           Length;
  HANDLE          RootDirectory;
  PUNICODE_STRING ObjectName;
  ULONG           Attributes;
  PVOID           SecurityDescriptor;
  PVOID           SecurityQualityOfService;
} OBJECT_ATTRIBUTES;

<<<<<<< Updated upstream
++++++++++++++++++++++++++++++++++++++



===========| Main Function |===========
=======
##############################################


######## Main Function #########
>>>>>>> Stashed changes

<MAIN>
{
	line 1;
	line 2;
	line 3;
	line 4;
}

;; The main function starts with <MAIN>, unlike C language int main()
<<<<<<< Updated upstream
++++++++++++++++++++++++++++++++++++++


===========| Variables definition |===========

=======

###### Variables definition ########
>>>>>>> Stashed changes
<type> <variable_name> = <var,NULL,int,string,constant>;
Example 1:
	PVOID remoteAddress = NULL;
	HANDLE hProcess = NULL;
Example 2:
	DWORD DesiredAccess = PROCESS_ALL_ACCESS;

Example 3:
	DWORD ProcInfo = 0x5;
	DWORD ProcInfo2 = 2;

;; The variable type has to match one of the types in the constants.py file.
;; A new type could be added to the file as you go. Make sure you add the correct size of that type.
<<<<<<< Updated upstream
++++++++++++++++++++++++++++++++++++++


===========| Variable assignment |===========

=======


##### Variable assignment #######
>>>>>>> Stashed changes
Example 1:
	BaseAddress = 0;
	BaseAddress += 1;
	BaseAddress -= 1;
	RegionSize = dwRet;
	mystring = "Hello world";
<<<<<<< Updated upstream
++++++++++++++++++++++++++++++++++++++


===========| Structure instance |===========
=======


####### Structure instance #######
>>>>>>> Stashed changes
Example 1:
	UNICODE_STRING NtImagePath;
Example 2:
	CLIENT_ID clientId = NULL;
<<<<<<< Updated upstream
++++++++++++++++++++++++++++++++++++++


===========| Struct member assignment |===========
=======


####### Struct member assignment #######
>>>>>>> Stashed changes
Example 1:
	clientId.UniqueThread = NULL;
Example 2:
	ObjectAttributes.Length = 23;
	ObjectAttributes.Length = sizeof(OBJECT_ATTRIBUTES);
<<<<<<< Updated upstream
++++++++++++++++++++++++++++++++++++++

===========| Function call |===========
=======

###### Function call #######
>>>>>>> Stashed changes
<function_name>(param1, param2, param3);
<function_name(param1,
				param2,
				param3);
Example 1:
NtAllocateVirtualMemory(hProcess, &BaseAddress, ZeroBits, &RegionSize, MEM_COMMIT | MEM_RESERVE, PAGE_EXECUTE_READWRITE);

Example 2:
NtAllocateVirtualMemory(hProcess,
						&BaseAddress,
						ZeroBits,
						&RegionSize,
						MEM_COMMIT | MEM_RESERVE,
						PAGE_EXECUTE_READWRITE
						)
<<<<<<< Updated upstream
++++++++++++++++++++++++++++++++++++++


===========| Returned structure from a function call |===========
=======


######## Returned structure from a function call ###########
>>>>>>> Stashed changes

;; Same as a normal structure, but with the word "hidden" added before.

Example 1;
hidden struct _SYSTEM_PROCESS_INFORMATION {
	line 1;
	line 2;
	line 3;
	} SYSTEM_PROCESS_INFORMATION;

<<<<<<< Updated upstream
++++++++++++++++++++++++++++++++++++++

===========| Getting value from a returned structure |===========

=======
####### Getting value from a returned structure #######
>>>>>>> Stashed changes
<var> = (<structure_name>)<returned pointer>->struct_member1->nested_member;

Example 1:
imageName = (SYSTEM_PROCESS_INFORMATION)newBaseAddress->ImageName->Buffer;

;; In the above example, "ImageName" is the variable that will store the value coming from the returned structure
;; "Buffer" is a nested member inside "ImageName" 
;; (SYSTEM_PROCESS_INFORMATION) is the structure defined earlier
;; "newBaseAddress" holds the address returned of the returned structure, mostly coming after a function call.

<<<<<<< Updated upstream
++++++++++++++++++++++++++++++++++++++


===========| Initializing a unicode string |===========

=======

####### Initializing a unicode string ########
>>>>>>> Stashed changes
InitUnicodeStr(<variable_to_assign>, "<string>")

Example 1:
InitUnicodeStr(processName, "Chrome.exe");
<<<<<<< Updated upstream
Example 2:
InitUnicodeStr(processName, "C:\\Windows\System32\calc.exe");

++++++++++++++++++++++++++++++++++++++

===========| Assigning string variable |===========

=======


##### Assigning string variable #######
>>>>>>> Stashed changes
PVOID <var_name> = "<string>";

Example 1:
PVOID buffer = "Hello world!";

<<<<<<< Updated upstream
++++++++++++++++++++++++++++++++++++++



===========| Special constants and functions |===========

<<< Functions >>>

=======



######## Special constants and functions ########
##Functions##
>>>>>>> Stashed changes
sizeof();
;; The sizeof gets the size of a string from a variable, or direct string, or structure.
Example 1:
ObjectAttributes.Length = sizeof(OBJECT_ATTRIBUTES);
Example 2:
PVOID buffer = "hello world";
ULONG NumberOfBytesToWrite = sizeof(buffer);

<<<<<<< Updated upstream
<<< Constants >>>

=======
##Constants##
>>>>>>> Stashed changes
- MEM_COMMIT
- MEM_RESERVE
- MEM_RELEASE
- PAGE_EXECUTE_READWRITE
- PAGE_READWRITE
- PAGE_READONLY
- PROCESS_ALL_ACCESS
- THREAD_ALL_ACCESS
- False
- True
- NTSTATUS
- NULL

<<<<<<< Updated upstream
++++++++++++++++++++++++++++++++++++++

=======
>>>>>>> Stashed changes
